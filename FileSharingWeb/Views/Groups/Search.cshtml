@using Microsoft.AspNetCore.Mvc.Localization
@inject IHtmlLocalizer<Resources> Localizer
@{
    ViewData["Title"] = Localizer["SEARCH_GROUPS"];
    ViewData["Options"] = new[]
    {
        "SendGroupRequest(),REQUEST_UNION"
    };
}
<div class="text-center">
    <select class="groups-search-select form-group">
        <option value="0" selected="selected">@Localizer["SEARCH"]</option>
    </select>
</div>

<script>
    $(".groups-search-select").select2({
        ajax: {
            url: "/Groups/Query",
            dataType: 'json',
            data: function (params) {
                return {
                    name: params.term, // search term
                    rowQty: params.rowQty,
                    page: params.page
                };
            },
            processResults: function (data, params) {
                // parse the results into the format expected by Select2
                // since we are using custom formatting functions we do not need to
                // alter the remote JSON data, except to indicate that infinite
                // scrolling can be used
                params.rowQty = 5;
                params.page = params.page;

                return {
                    results: data,
                    pagination: {
                        more: (params.page + 1 * 5) < data.total_count
                    }
                };
            },
            cache: false
        },
        escapeMarkup: function (markup) { return markup; },
        minimumInputLength: 3,
        templateResult: formatGroup,
        templateSelection: formatGroupSelection
    });

    function formatGroup(group) {
        if (group.loading) return group.text;

        var markup = "<div class='clearfix'>" +
            "<div class='text-center'><h3>" + group.name + "</h3>" + group.numOfMembers + " @Localizer["MEMBERS"] | " + group.numOfFiles + " @Localizer["FILES"]</div>" +
            "</div>";

        return markup;
    }

    function formatGroupSelection(group) {
        return group.name || group.text;
    }
</script>